from classes import *
import streamlit as st
from datetime import datetime as time


@st.cache(suppress_st_warning=True, allow_output_mutation=True)
def load_models():
    bow_q = BoWCorpora(stype='q')
    tfidf_q = TfidfCorpora(stype='q')
    bm25_q = OkapiBM25Corpus(stype='q')
    ft_q = FastTextCorpora(stype='q')
    bert_q = BertCorpus(stype='q')
    bow_a = BoWCorpora(stype='a')
    tfidf_a = TfidfCorpora(stype='a')
    bm25_a = OkapiBM25Corpus(stype='a')
    ft_a = FastTextCorpora(stype='a')
    bert_a = BertCorpus(stype='a')
    return (bow_q, tfidf_q, bm25_q, ft_q, bert_q,
            bow_a, tfidf_a, bm25_a, ft_a, bert_a)


def choose_vectorizer(vec, stype, models):
    (bow_q, tfidf_q, bm25_q, ft_q, bert_q,
    bow_a, tfidf_a, bm25_a, ft_a, bert_a) = models
    if vec == 'CountVectorizer':
        if stype == '–í–æ–ø—Ä–æ—Å—ã':
            return bow_q
        return bow_a
    elif vec == 'TfidfVectorizer':
        if stype == '–í–æ–ø—Ä–æ—Å—ã':
            return tfidf_q
        return tfidf_a
    elif vec == 'Okapi BM25':
        if stype == '–í–æ–ø—Ä–æ—Å—ã':
            return bm25_q
        return bm25_q
    elif vec == 'FastText':
        if stype == '–í–æ–ø—Ä–æ—Å—ã':
            return ft_q
        return ft_a
    else:
        if stype == '–í–æ–ø—Ä–æ—Å—ã':
            return bert_q
        return bert_a


def main():
    st.markdown("<h1 style='text-align: center; font-size: 700%'>‚ú®üîÆ‚ú®</h1>",
                unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>‚ù§Ô∏è –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ "
                "–≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ª—é–±–æ–≤—å ‚ù§Ô∏è</h2>",  unsafe_allow_html=True)
    st.markdown('',  unsafe_allow_html=True)
    st.markdown("<p style='text=align: center;'>–ù–æ –ª—É—á—à–µ –º–µ–Ω—è –Ω–µ —Å–ª—É—à–∞—Ç—å, "
                "–ø–æ—Ç–æ–º—É —á—Ç–æ —è –æ–ø–∏—Ä–∞—é—Å—å –Ω–∞ –æ—Ç–≤–µ—Ç—ã –º–µ–π–ª.—Ä—É, –∞ —ç—Ç–æ —Ç–æ –µ—â–µ "
                "–º–µ—Å—Ç–æ...</p>",  unsafe_allow_html=True)

    with st.spinner('‚ú® –û–±—Ä–∞—â–∞—é—Å—å –∫ –∑–≤–µ–∑–¥–∞–º... ‚ú®'):
        models = load_models()

    vec = st.radio(
          "–ö–∞–∫–æ–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?",
          ('CountVectorizer', 'TfidfVectorizer',
           'Okapi BM25', 'FastText', 'BERT'))
    st.write('<style>div.row-widget.stRadio > div{'
             'flex-direction:row;justify-content: '
             'center;padding:10px;}</style>', unsafe_allow_html=True)

    search_type = st.radio(
        "–ü–æ —á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å?",
        ('–í–æ–ø—Ä–æ—Å—ã', '–û—Ç–≤–µ—Ç—ã'))

    vectorizer = choose_vectorizer(vec, search_type, models)

    k = st.slider('–ö–∞–∫ –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?', 1, 50, 5)
    st.subheader('–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å:')
    query = st.text_input('', '–ö–∞–∫ –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å?')

    time_start = time.now()
    results = vectorizer.search_query(query, k)
    time_end = time.now()

    for r, result in enumerate(results, 1):
        st.write(f'{r}. {result[0]}')

    st.write(f"<p style='opacity:.5'>–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {time_end-time_start}</p>",
             unsafe_allow_html=True)


if __name__ == '__main__':
    main()
